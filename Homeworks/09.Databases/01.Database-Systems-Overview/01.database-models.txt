Problem 1. What database models do you know?
**************************************************


Hierarchical Model
-----------------------------------------------------------------------------------
The hierarchical data model organizes data in a tree structure.
There is a hierarchy of parent and child data segments.
This structure implies that a record can have repeating information,
generally in the child data segments. Data in a series of records,
which have a set of field values attached to it. It collects all the
instances of a specific record together as a record type. These record
types are the equivalent of tables in the relational model, and with the
individual records being the equivalent of rows. To create links between
these record types, the hierarchical model uses Parent Child Relationships.
These are a 1:N mapping between record types. This is done by using trees,
like set theory used in the relational model, "borrowed" from maths.
For example, an organization might store information about an employee,
such as name, employee number, department, salary. The organization might
also store information about an employee's children, such as name and date of birth.
The employee and children data forms a hierarchy, where the employee data represents
the parent segment and the children data represents the child segment.
If an employee has three children, then there would be three child segments
associated with one employee segment. In a hierarchical database the parent-child
relationship is one to many. This restricts a child segment to having only one parent segment.



Network Model
-----------------------------------------------------------------------------------
The popularity of the network data model coincided with the popularity of the hierarchical data model.
Some data were more naturally modeled with more than one parent per child.
So, the network model permitted the modeling of many-to-many relationships in data.
In 1971, the Conference on Data Systems Languages (CODASYL) formally defined the network model.
The basic data modeling construct in the network model is the set construct.
A set consists of an owner record type, a set name, and a member record type.
A member record type can have that role in more than one set, hence the multiparent concept
is supported. An owner record type can also be a member or owner in another set.
The data model is a simple network, and link and intersection record types
(called junction records by IDMS) may exist, as well as sets between them .
Thus, the complete network of relationships is represented by several pairwise sets;
in each set some (one) record type is owner (at the tail of the network arrow)
and one or more record types are members (at the head of the relationship arrow).
Usually, a set defines a 1:M relationship, although 1:1 is permitted. The CODASYL
network model is based on mathematical set theory. 



Relational Model
-----------------------------------------------------------------------------------
(RDBMS - relational database management system)
A database based on the relational model developed by E.F. Codd.
A relational database allows the definition of data structures,
storage and retrieval operations and integrity constraints.
In such a database the data and relations between them are organised in tables.
A table is a collection of records and each record in a table contains the same fields. 



Object/Relational Model
-----------------------------------------------------------------------------------
Object/relational database management systems (ORDBMSs) add new object storage capabilities
to the relational systems at the core of modern information systems. These new facilities
integrate management of traditional fielded data, complex objects such as time-series
and geospatial data and diverse binary media such as audio, video, images, and applets.
By encapsulating methods with data structures, an ORDBMS server can execute comple x analytical
and data manipulation operations to search and transform multimedia and other complex objects.



Object-Oriented Model
-----------------------------------------------------------------------------------
Object DBMSs add database functionality to object programming languages.
They bring much more than persistent storage of programming language objects.
Object DBMSs extend the semantics of the C++, Smalltalk and Java object
programming languages to provide full-featured database programming capability,
while retaining native language compatibility. A major benefit of this approach
is the unification of the application and database development into a seamless
data model and language environment. As a result, applications require less code,
use more natural data modeling, and code bases are easier to maintain.
Object developers can write complete database applications with a modest amount of additional effort.



Associative Model
-----------------------------------------------------------------------------------
The associative model divides the real-world things about which data is to be recorded into two sorts:
Entities are things that have discrete, independent existence.
An entity’s existence does not depend on any other thing.
Associations are things whose existence depends on one or more other things,
such that if any of those things ceases to exist, then the thing itself ceases
to exist or becomes meaningless.